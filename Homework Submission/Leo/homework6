#1.
'''import tkinter as tk
import time
class CanvasWidget:
  def __init__(self, master):
    self.canvas = tk.Canvas(master, width=600, height=400, bg="white")
    self.canvas.pack()
    self.rect1 = self.canvas.create_rectangle(50, 50, 150, 100, fill="red")
    self.rect2 = self.canvas.create_rectangle(400, 150, 500, 250, fill="blue")
    self.move_rectangles()
  def move_rectangles(self):
    self.canvas.move(self.rect1, 5, 0)  # Move right
    self.canvas.move(self.rect2, -5, 0) # Move left
    if self.canvas.coords(self.rect1)[2] > 600:
      self.canvas.move(self.rect1, -600, 0)
    if self.canvas.coords(self.rect2)[0] < 0:
      self.canvas.move(self.rect2, 600, 0)
    self.canvas.after(20, self.move_rectangles)  # Continuous movement
root = tk.Tk()
root.title("Canvas Widget")
canvas_widget = CanvasWidget(root)
root.mainloop()'''
#2. 3. 4. 5.
import tkinter as tk

# Create the main window
root = tk.Tk()
root.title("Pong Game with Score Tracker")

# Create a canvas for the game
canvas = tk.Canvas(root, width=600, height=300, bg="black")
canvas.pack()

# Create paddles and ball
paddle1 = canvas.create_rectangle(10, 100, 20, 200, fill="white")
paddle2 = canvas.create_rectangle(580, 100, 590, 200, fill="white")
ball = canvas.create_oval(290, 140, 310, 160, fill="white")

# Variables for ball movement
ball_dx = 8
ball_dy = 8
ball_speed = 8  # Initial ball speed

# Initialize scores
score1 = 0
score2 = 0

# Display scores on the canvas
score_display = canvas.create_text(300, 20, text="Player 1: 0   Player 2: 0", fill="white", font=("Arial", 16))

# Track whether the game is paused
is_paused = False
paused_text = None  # Variable to hold the "PAUSED" text object

# Variables to store ball speed when paused
paused_ball_dx = None
paused_ball_dy = None

# Function to move paddles
def move_paddle(event):
    if is_paused:
        return  # Don't move paddles if the game is paused
    
    key = event.keysym
    if key == "w" and canvas.coords(paddle1)[1] > 0:  # Paddle 1 moves up
        canvas.move(paddle1, 0, -20)
    elif key == "s" and canvas.coords(paddle1)[3] < 300:  # Paddle 1 moves down
        canvas.move(paddle1, 0, 20)
    elif key == "Up" and canvas.coords(paddle2)[1] > 0:  # Paddle 2 moves up
        canvas.move(paddle2, 0, -20)
    elif key == "Down" and canvas.coords(paddle2)[3] < 300:  # Paddle 2 moves down
        canvas.move(paddle2, 0, 20)

# Bind key presses to the paddle movement function
canvas.bind_all("<KeyPress>", move_paddle)

# Function to update the score
def update_score():
    global score1, score2
    canvas.itemconfig(score_display, text=f"Player 1: {score1}   Player 2: {score2}")

# Function to increase the ball speed
def increase_ball_speed():
    global ball_speed, ball_dx, ball_dy  
    ball_speed += 2 # Increase ball speed
    ball_dx = ball_speed
    ball_dy = ball_speed

# Function to move the ball and handle collisions
def move_ball():
    global ball_speed, ball_dx, ball_dy, score1, score2

    if is_paused:
        root.after(30, move_ball)  # Continue checking the pause status
        return  # Don't move the ball if the game is paused

    canvas.move(ball, ball_dx, ball_dy)
    ball_pos = canvas.coords(ball)

    # Ball collision with top and bottom edges
    if ball_pos[1] <= 0 or ball_pos[3] >= 300:
        ball_dy = -ball_dy

    # Ball collision with paddles
    if (ball_pos[0] <= canvas.coords(paddle1)[2] and
        canvas.coords(paddle1)[1] < ball_pos[3] and
        canvas.coords(paddle1)[3] > ball_pos[1]) or \
       (ball_pos[2] >= canvas.coords(paddle2)[0] and
        canvas.coords(paddle2)[1] < ball_pos[3] and
        canvas.coords(paddle2)[3] > ball_pos[1]):
        ball_dx = -ball_dx

    # Ball resets if it goes out of bounds and updates scores
    if ball_pos[0] <= 0:  # Player 2 scores
        score2 += 1
        update_score()
        canvas.coords(ball, 290, 140, 310, 160)  # Reset ball to the center
        ball_dx = abs(ball_dx)  # Ensure ball moves to the right
    if ball_pos[2] >= 600:  # Player 1 scores
        score1 += 1
        update_score()
        canvas.coords(ball, 290, 140, 310, 160)  # Reset ball to the center
        ball_dx = -abs(ball_dx)  # Ensure ball moves to the left

    root.after(30, move_ball)

# Bind the "g" key to the increase_ball_speed function
root.bind("<g>", lambda event: increase_ball_speed())

# Function to toggle the pause state when "p" is pressed
def toggle_pause(event):
    global is_paused, paused_text, ball_dx, ball_dy, paused_ball_dx, paused_ball_dy

    is_paused = not is_paused

    if is_paused:
        # Store the current ball speed when paused
        paused_ball_dx = ball_dx
        paused_ball_dy = ball_dy

        # Stop the ball from moving during pause
        ball_dx = 0
        ball_dy = 0

        # Show "PAUSED" text in the middle of the canvas
        paused_text = canvas.create_text(300, 150, text="PAUSED", fill="white", font=("Arial", 24))
    else:
        # Restore the ball speed when unpausing
        ball_dx = paused_ball_dx
        ball_dy = paused_ball_dy

        # Remove "PAUSED" text when unpausing
        if paused_text:
            canvas.delete(paused_text)
            paused_text = None  # Clear the reference
        move_ball()  # Continue the ball movement after unpausing

# Bind the "p" key to the pause toggle function
root.bind("<p>", toggle_pause)

# Start moving the ball
move_ball()

# Run the application
root.mainloop()
