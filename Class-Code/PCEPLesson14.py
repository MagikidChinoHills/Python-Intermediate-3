# -*- coding: utf-8 -*-
"""Python_Pcep_Lesson_14_Operator_Precedence

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17HFOgYUZ7H8Mme7b_IxVsudTRT6tnLr4

## Objectives:
By the end of this lesson, you will:

Understand **operator precedence** and how Python evaluates expressions.

Learn the **order of operations** **(PEMDAS)** in Python.

Predict the **output of expressions** step-by-step.

Strengthen problem-solving skills through practice problems.

##1. Understanding Operator Precedence

**Order of Operations in Python**

Python evaluates expressions using a set order known as **operator precedence** , which follows:

* Parentheses `()` – Operations inside parentheses are evaluated first.

* Exponentiation `**` – Powers are calculated next.

* Unary plus/minus `+x`, `-x` – Apply positive or negative signs.

* Multiplication `*`, Division `/`, Floor Division `//`, Modulus `%` – Performed from left to right.

* Addition `+` and Subtraction `-` – Performed from left to right.

**Operator Precedence Table (From Highest to Lowest)**

Precedence Level	Operators

* 1 `()`(Parentheses) -- **(Highest)**

* 2	`**`(Exponentiation)

* 3	`+x`, `-x` (Unary plus/minus)

* 4	`*`, `/`, `//`, `%` (Multiplication/Division)

* 5	`+`, `-` (Addition/Subtraction)

* 6 `=` (Assignment) -- **(Lowest)**

## 2. Example Problems
Problem 1: Evaluating a Simple Expression

Expression:
"""

# Expression 1
print(5 * 2 + 8 / 4)

print(45/5)

"""Problem 2: Operator Grouping Without Parentheses

Expression:
"""

# Expression 2
print(7 / 2 * 2)

# Example
print(7 / (2 * 2))

"""Problem 3: Using Exponents and Floor Division

Expression:
"""

# Expression 3
print(2 ** -1 + 5 // 2)

print(2**1)

print(2**-1)

print(3**-2 + 9 // 4 * 9)

"""Problem 4: Nested Operations with Parentheses

Expression:
"""

# Expression 4
print((4 - 2) ** 3 / 2 + 1)

"""Problem 5: Mixing Multiplication and Exponents

Expression:
"""

# Expression 5
print(3 * 2 ** 3)

"""## 3. Practice Questions

For each question, predict the output before running the code :
"""

# Practice Problems
# P1
print(8 / (2 + 2) ** 2)
# P2
print(-10 % 3)
# P3
print(-3 ** 2)
# P4
print(1 + 2 ** 3 // 4 * 3.0)
# P5
print(4 ** 2 - 2 ** 3)
# P6
print((3 + 4) / 2 * 3)
# P7
print(25 // 10.0)

"""Bonus"""

# Expression Error!
print(1 ** 2 * 1 ** 1 * 2 ** 2 * 2)

# 1 * 1 * 4 * 2
# 8

# Student submitted problems
# P1
#print((3**3-4)/(4*3)-(6/5))
# P2
#print((6*3/4**2)*(8*3/2**2))
# P3
#print((5+3/8*2) + (4**2/15))
# P4
#print(8 ** 6 ** 28 % 4 + 58.3251 - (23.0854 * 2))
# P5
#print(5 / 4 * (2**3) - 32 * -4)
# P6
#print(5 / 10 // 1 / 7 // 4 / 5 // 3)

#Bonus
print((6*3/4**-2)*(8*3/2**-2))

"""## 4. Final Thoughts

✅Break down each expression step-by-step before running the code.

✅ Use PEMDAS to determine the correct order of operations.

✅ Write out your thought process before checking the actual result.

✅ Experiment with different expressions to deepen your understanding.
"""

!jupyter nbconvert --to html /Python_Pcep_Lesson_14_Operator_Precedence.ipynb